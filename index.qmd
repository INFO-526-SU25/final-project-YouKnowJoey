---
title: "Graphically Pawsitive Vibes"
subtitle: "INFO 526 - Summer 2025 - Final Project"
author: 
  - name: "Isle of Dogs"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "This project will graphically depict trends, patterns, and analysis of Animal Shelter data derived from the TidyTuesday initiative. The dataset includes information about animals taken in and released from the shelter; there are variables such as intake type, outcome type, animal type, breed, age, and more. The primary goal of this project is to identify key factors that influence an animals outcome."
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

```{r}
#| label: load-pkgs
#| message: false
#| echo: false

if (!require("pacman")) 
  install.packages("pacman")

pacman::p_load(tidyverse,
               tidytuesdayR,
               formattable,
               dlookr,
               ggplot2,
               scales,
               lubridate,
               RColorBrewer)
```

# Graphically Pawsitive Vibes

## Abstract

This project examines factors influencing animal outcomes and adoption timelines at the Long Beach Animal Shelter. The dataset—sourced from TidyTuesday—contains 29,787 records and 22 fields, capturing intake and outcome events for various species in Long Beach, California.

The first goal investigates how intake conditions, species grouping, and age at intake relate to final outcomes. The raw data are cleaned and transformed by parsing the `dob` field into a numeric `age_at_intake`, standardizing `intake_condition` values, and collapsing `animal_type`. Visual analyses reveal which intake conditions are associated with more favorable outcomes, how outcome patterns differ across species groups, and whether age correlates with specific dispositions. These insights may help shelter staff identify high‐risk subgroups and allocate medical or foster resources more effectively.

The second goal examines how both the number of adoptions and the speed of adoption have changed from 2017 through 2024. We filter to records where `outcome_type == "adoption"`, compute `days_to_adoption` as the difference between `outcome_date` and `intake_date`, and derive `intake_year`. Vsualizations combine median adoption timelines with annual adoption counts to show how volumes and wait times have shifted year over year. This dual view reveals not just whether animals are moving through the shelter more quickly, but also whether adoption demand has increased or decreased, offering actionable insights for capacity planning, resource allocation, and ongoing performance benchmarking.

## Introduction

The Long Beach Animal Shelter dataset (TidyTuesday week 2025-03-04) captures 29,787 intake and outcome records from 2021–2025, sourced from the City of Long Beach Animal Care Services open data portal. It includes 22 fields such as `intake_date`, `outcome_date`, `intake_condition`, `animal_type`, `outcome_type`, `dob`, and geolocation, providing a rich mix of categorical, date, and numeric variables.

This project visualizes which intake scenarios and animal characteristics predict different outcomes, and how quickly animals find homes over time. By looking at a variety of visualizations, we hope to provide insight into how intake conditions and animal types affect the animal's outcome and then examine year-by-year shifts in both the number of adoptions and the speed with which animals find homes. This information could deliver actionable insights for shelter staff on resource allocation and policy planning.

## Data Loading and Cleaning

Load the Longbeach dataset from TidyTuesday

```{r}
longbeach <- tt_load("2025-03-04")
longbeach = longbeach$longbeach
```

Before diving into our analyses, we perform several key data‐wrangling steps to ensure consistency and create the variables we need. First, we standardize the `intake_condition` text by trimming extra whitespace, replacing slashes with spaces, and converting to lowercase. Next, we collapse the many values of `animal_type` into a three-level factor—Dog, Cat, and Other—so we can directly compare these groups. We also calculate each animal’s age at intake (in years) from its date of birth, flagging missing values as “Unknown.” Finally, we derive `days_to_adoption` by subtracting `intake_date` from `outcome_date`, which sets us up to explore adoption timelines.

```{r}
longbeach_clean <- longbeach |>
  
  # standardize intake_condition
  mutate(
    intake_condition = intake_condition |>
      str_squish()             # collapse multiple spaces
      |> str_replace_all("/", " ")  # replace slashes with spaces
      |> str_to_lower()             # convert to lowercase
  ) |>
  
  # create a simplified species_group
  mutate(
    species_group = case_when(
      animal_type == "dog" ~ "Dog",
      animal_type == "cat" ~ "Cat",
      TRUE ~ "Other"
    ) |> 
      factor(levels = c("Dog", "Cat", "Other"))
  ) |>
  
  # compute age_at_intake and flag unknowns
  mutate(
    age_at_intake = as.numeric(intake_date - dob) / 365,
    age_unknown   = is.na(age_at_intake)
  ) |>
  
  # compute days_to_adoption
  mutate(
    days_to_adoption = as.integer(outcome_date - intake_date)
  )
```

#### Analysis of Data

To establish the rationale for combining `animal_type` into Dog, Cat, and Other, horizontal bar chart of the various values of `animal_type` are shown with colot highlighting the grouping.

```{r}
longbeach_clean |>
  count(animal_type, species_group, sort = TRUE) |>
  ggplot(aes(x = n, y = reorder(animal_type, n), fill = species_group)) +
    geom_col() +
    geom_text(aes(label = n),
              hjust = -0.1,
              size = 3) +
    scale_x_continuous(
      expand = expansion(mult = c(0, 0.05)),
      labels = scales::comma_format()
    ) +
    labs(
      title = "Animal Intakes by Type (Dog, Cat, Other)",
      subtitle = "Shelter intakes, 2017–2024",
      x = "Number of Intakes",
      y  = "Animal Type",
      fill = "Species Group",
      caption = "Source: City of Long Beach Animal Care Services (TidyTuesday 2025-03-04)"
    ) +
    scale_fill_discrete(
      breaks = c("Cat", "Dog", "Other")
    ) +
    theme_minimal() +
    theme(
      plot.title.position = "plot",
      plot.title = element_text(face = "bold", hjust = 0.1, size = 12),
      plot.subtitle = element_text(hjust = 0.07, size = 10),
      axis.text = element_text(size = 10),
      plot.caption = element_text(margin = margin(t = 13)),
      legend.position = "inside",
      legend.position.inside = c(0.9, 0.5),
      legend.background = element_rect(fill = "white")
    )

```

## Question 1: How do intake conditions and animal types affect the animal's outcome?

### Introduction:

Animal shelters frequently intake a wide range of animals with different conditions. From scenarios such as healthy surrenders, injured or ill, or stray pickups. Understanding how these intake conditions affect the final outcomes across the three categorized animal types (dogs, cats, and others) is crucial. This analysis provides insights into which species may be underrepresented or disproportionately affected, helping shelter management and policymakers make informed decisions to improve animal care and resource allocation.

### Approach (1-2 paragraphs):

We will analyze how `intake_condition` and `animal_type` affect the likelihood of different outcomes for animals in a shelter. To simplify interpretation and capture broad patterns, `animal_type` has been recoded into a species_group with three categories: dogs, cats, and others. Initially, all 19 unique `outcome_type` values will be explored, based on their distribution, we further categorize outcomes into three groups `outcome_category`: death, non-death, and adopted.

### Analysis (2-3 code blocks, 2 figures, text/code comments as needed):

```{r}

longbeach_clean |>
  mutate(outcome_category = case_when(
    outcome_type %in% c("adoption", "foster to adopt", 
                        "homefirst") ~ "adopted",
    outcome_type %in% c("euthanasia", "died", 
                        "disposal") ~ "death",
    outcome_type %in% c("rescue", "transfer", 
                        "return to owner", "shelter, neuter, return", 
                        "return to rescue", "transport", 
                        "community cat", "return to wild habitat", 
                        "foster", "trap, neuter, release", 
                        "missing", "NA", 
                        "duplicate") ~ "non-death",
    TRUE ~ "non-death"
  )) |>
  group_by(species_group, outcome_category) |>
  summarise(n = n(), .groups = "drop") |>
  group_by(species_group) |>
  mutate(prop = n / sum(n)) |>
  ggplot(aes(x = species_group, y = prop, fill = outcome_category)) +
  geom_col(position = "dodge", color = "white") +
  scale_y_continuous(labels = percent_format()) +
  labs(
    title = "Proportion of Outcomes by Animal Type",
    y = "Proportion of Outcomes",
    x = NULL,
    fill = "Outcome Category"
  ) +
  theme_minimal()


```

```{r}

# Select top 5 intake conditions by count for each outcome category
top_5_intake <- longbeach_clean |>
  mutate(outcome_category = case_when(
    outcome_type %in% c("adoption", "foster to adopt", 
                        "homefirst") ~ "adopted",
    outcome_type %in% c("euthanasia", "died", 
                        "disposal") ~ "death",
    outcome_type %in% c("rescue", "transfer", 
                        "return to owner", "shelter, neuter, return", 
                        "return to rescue", "transport", 
                        "community cat", "return to wild habitat", 
                        "foster", "trap, neuter, release", 
                        "missing", "NA", 
                        "duplicate") ~ "non-death",
    TRUE ~ "non-death"
  )) |>
  filter(!is.na(intake_condition)) |>
  group_by(outcome_category, intake_condition) |>
  summarise(n = n(), .groups = "drop") |>
  group_by(outcome_category) |>
  slice_max(n, n = 5)

ggplot(top_5_intake, 
       aes(x = reorder(intake_condition, n), y = n, fill = intake_condition)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ outcome_category, 
             scales = "free_y") +
  coord_flip() +
  scale_fill_brewer(palette = "Dark2") +
  labs(
    title = "Top 5 Intake Conditions by Outcome Category",
    x = "Intake Condition",
    y = "Count"
  ) +
  theme_minimal()

```

### Discussion (1-3 paragraphs):

## Question 2: How Have Adoption Volumes and Timelines Evolved (2017–2024) Across Dogs, Cats, and Other Species?

### Introduction:

Understanding how both the volume of adoptions and the speed at which animals leave the shelter have shifted from 2017 through 2024 is critical for effective capacity planning and resource management. Breaking these trends out by Dogs, Cats, and Other species groups also lets us assess the impact of recent outreach and medical initiatives and inform future program investments.

### Approach:

**Plot 1** shows, for each species group (Dogs, Cats, Other), how adoption volumes and delay distributions have shifted annually from 2017 through 2024. The grey bars (right‐axis scale) represent the total count of adoptions each year (scaled to the 95th percentile), while the blue violins (left‐axis scale) depict the full distribution of days-to-adoption, with dark points marking the median.

**Plot 2** consists of bubble chart plots, for each species group, the year‐to‐year relationship between the speed of adoptions (median days to adoption on the y-axis) and the volume of adoptions (bubble size). By faceting Dogs, Cats, and Other vertically, you can see how median wait times and total placements have moved in tandem from 2017 through 2024.

### Analysis:

```{r}
adopt_df <- longbeach_clean |>
  filter(outcome_type == "adoption", !is.na(days_to_adoption)) |>
  mutate(intake_year = year(intake_date))
```

#### Plot 1

```{r}
#| fig-width: 10
#| fig-height: 7

# 1. Prepare adoption data for 2017–2024
adopt_df_full <- longbeach_clean |>
  filter(
    outcome_type     == "adoption",
    !is.na(days_to_adoption),
    days_to_adoption >= 0
  ) |>
  # derive a numeric year for filtering
  mutate(intake_year_num = year(intake_date)) |>
  filter(intake_year_num >= 2017, intake_year_num <= 2024) |>
  # then turn it into a factor for the x-axis
  mutate(intake_year = factor(intake_year_num, levels = 2017:2024)) 

# 2. Compute the 95th percentile of days_to_adoption
p95 <- quantile(adopt_df_full$days_to_adoption, 0.95, na.rm = TRUE)

# 3. Compute counts per year & species for bar fills
count_df <- adopt_df_full |>
  count(species_group, intake_year, name = "n_adopt")

# 4. Scaling factor to align counts with days scale
scaleFact <- p95 / max(count_df$n_adopt)

# 5. Plot with combined legend on top
ggplot() +
  # Bars (counts)
  geom_col(
    data = count_df,
    aes(x = intake_year, y = n_adopt * scaleFact, fill = "Number of adoptions"),
    width = 0.6,
    alpha = 0.7
  ) +
  # Violins (delay distributions)
  geom_violin(
    data = adopt_df_full,
    aes(x = intake_year, y = days_to_adoption, fill = "Days to adoption"),
    trim  = FALSE, 
    color  = NA,
    alpha = 0.7
  ) +
  # Median points
  stat_summary(
    data = adopt_df_full,
    aes(x = intake_year, y = days_to_adoption, color = "Median days"),
    fun    = median,
    geom   = "point",
    size   = 3
  ) +
  facet_wrap(~ species_group, ncol = 1, scales = "fixed") +
  scale_x_discrete(drop = FALSE) +
  
  # Fill legend for bars & violins
  scale_fill_manual(
    name   = NULL,
    values = c(
      "Days to adoption"   = "skyblue",
      "Number of adoptions" = "grey80"
    ),
    breaks = c("Days to adoption", "Number of adoptions"),
    guide  = guide_legend(order = 1)
  ) +
  # Color legend for median dots
  scale_color_manual(
    values = c("Median days" = "darkblue"),
    guide  = guide_legend(order = 2, override.aes = list(size = 4)),
    name   = NULL
  ) +
  
  # Dual axis & zoom
  scale_y_continuous(
    name    = "Days to Adoption (violins)",
    labels  = comma_format(),
    expand  = c(0, 0),
    sec.axis = sec_axis(
      ~ . / scaleFact,
      name   = "Number of Adoptions (bars)",
      labels = comma_format()
    )
  ) +
  coord_cartesian(ylim = c(0, p95)) +
  
  labs(
    title    = "Adoption Delays and Counts by Year and Species Group",
    subtitle = "Violins = days to adoption; Bars = count of adoptions; Dots = median (2017–2024)",
    x        = "Intake Year"
  ) +
  theme_minimal() +
  theme(
    legend.position       = "top",
    legend.direction      = "horizontal",
    plot.title.position   = "plot",
    plot.title            = element_text(face = "bold", hjust = 0.1),
    plot.subtitle         = element_text(hjust = 0.1),
    strip.text            = element_text(face = "bold"),
    axis.title.x          = element_text(margin = margin(t = 8)),
    axis.text             = element_text(size = 10)
  )

```

#### Plot 2

```{r}
#| fig-width: 10
#| fig-height: 7

bubble_df <- longbeach_clean |>
  filter(outcome_type == "adoption", !is.na(days_to_adoption)) |>
  mutate(intake_year = year(intake_date)) |>
  filter(intake_year >= 2017, intake_year <= 2024) |>
  group_by(species_group, intake_year) |>
  summarise(
    median_days = median(days_to_adoption, na.rm = TRUE),
    n_adopt     = n(),
    .groups     = "drop"
  )

ggplot(bubble_df, aes(x = intake_year, y = median_days)) +
  geom_line(aes(group = 1), color = "grey50", linewidth = 0.5) +
  geom_point(aes(size = n_adopt),
             fill   = "skyblue",
             color  = "white",
             shape  = 21,
             alpha  = 0.8) +
  facet_wrap(~ species_group, ncol = 1, scales = "free_y") +
  scale_x_continuous(breaks = 2017:2024) +
  scale_y_continuous(
    name   = "Median Days to Adoption",
    expand = expansion(add = c(5, 5))  # 5-day padding below
  ) +
  scale_size_area(
    max_size = 12,
    name     = "Count of Adoptions"
  ) +
  labs(
    title    = "Adoption Speed vs. Volume Over Time",
    subtitle = "Median days-to-adoption (y) & adoption count (point size), faceted by species group",
    x        = "Intake Year"
  ) +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title          = element_text(face = "bold", hjust = 0.1),
    plot.subtitle       = element_text(hjust = 0.1),
    strip.text          = element_text(face = "bold"),
    axis.title.x        = element_text(margin = margin(t = 8)),
    axis.text           = element_text(size = 12)
  )
```

### Discussion (1-3 paragraphs):
